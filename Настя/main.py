import pandas

df = pandas.read_excel('ДЛЯ ЗАГРУЗКИ.xlsx', sheet_name='Лист')

all_xml = '''<RegistrySet>'''
dict1 = {
    "Оказание первой помощи пострадавшим": 1,
    "Использование (применение) средств индивидуальной защиты": 2,
    "Общие вопросы охраны труда и функционирования системы управления охраной труда": 3,
    "Безопасные методы и приемы выполнения работ при воздействии вредных и (или) опасных производственных факторов," \
    " источников опасности, идентифицированных в рамках специальной оценки условий труда и оценки профессиональных рисков": 4,
    "Безопасные методы и приемы выполнения земляных работ": 6,
    "Безопасные методы и приемы выполнения ремонтных, монтажных и демонтажных работ зданий и сооружений": 7,
    "Безопасные методы и приемы выполнения работ при размещении, монтаже, техническом обслуживании и ремонте технологического оборудования (включая технологическое оборудование)": 8,
    "Безопасные методы и приемы выполнения работ на высоте": 9,
    "Безопасные методы и приемы выполнения пожароопасных работ": 10,
    "Безопасные методы и приемы выполнения работ в ограниченных и замкнутых пространствах (ОЗП)": 11,
    "Безопасные методы и приемы выполнения строительных работ, в том числе: - окрасочные работы - электросварочные и газосварочные работы": 12,
    "Безопасные методы и приемы выполнения работ, связанных с опасностью воздействия сильнодействующих и ядовитых веществ": 13,
    "Безопасные методы и приемы выполнения газоопасных работ": 14,
    "Безопасные методы и приемы выполнения огневых работ": 15,
    "Безопасные методы и приемы выполнения работ, связанные с эксплуатацией подъемных сооружений": 16,
    "Безопасные методы и приемы выполнения работ, связанные с эксплуатацией тепловых энергоустановок": 17,
    "Безопасные методы и приемы выполнения работ в электроустановках": 18,
    "Безопасные методы и приемы выполнения работ, связанные с эксплуатацией сосудов, работающих под избыточным давлением": 19,
    "Безопасные методы и приемы обращения с животными": 20,
    "Безопасные методы и приемы при выполнении водолазных работ": 21,
    "Безопасные методы и приемы работ по поиску, идентификации, обезвреживанию и уничтожению взрывоопасных предметов": 22,
    "Безопасные методы и приемы работ в непосредственной близости от полотна или проезжей части эксплуатируемых автомобильных и железных дорог": 23,
    "Безопасные методы и приемы работ, на участках с патогенным заражением почвы": 24,
    "Безопасные методы и приемы работ по валке леса в особо опасных условиях": 25,
    "Безопасные методы и приемы работ по перемещению тяжеловесных и крупногабаритных грузов при отсутствии машин соответствующей " \
    "грузоподъемности и разборке покосившихся и опасных (неправильно уложенных) штабелей круглых лесоматериалов": 26,
    "Безопасные методы и приемы работ с радиоактивными веществами и источниками ионизирующих излучений": 27,
    "Безопасные методы и приемы работ с ручным инструментом, в том числе с пиротехническим": 28,
    "Безопасные методы и приемы работ в театрах": 29,
}

for index, row in df.iterrows():
    # if {row['Результат']} == 'удовлетворительно':
    #     isPassed = True
    #     learnProgramId = 3
    # else:
    #     isPassed = False
    #     learnProgramId = 0
    try:
        if len(row['Фамилия'].split(' ')) > 2:
            fio = row['Фамилия'].replace('\n', ' ')
            fio = fio.split(' ')
            row['Фамилия'] = fio[0]
            row['Имя'] = fio[1]
            row['Отчество'] = fio[2]
    except AttributeError:
        pass
    LearnProgramTitle = ' '.join(row['Программа обучения'].split())
    learnProgramId = dict1[LearnProgramTitle]
    Date = row['Дата проверки знаний'].strftime('%Y-%m-%d')
    a = f"""
        <RegistryRecord>
            <Worker>
                <LastName>{row['Фамилия']}</LastName>
                <FirstName>{row['Имя']}</FirstName>
                <MiddleName>{row['Отчество']}</MiddleName>
                <Snils>{row['СНИЛС']}</Snils>
                <Position>{row['Должность']}</Position>
                <EmployerInn>{row['ИНН работодателя']}</EmployerInn>
                <EmployerTitle>{row['Наименование работодателя']}</EmployerTitle>
            </Worker>
            <Organization>
                <Inn>2312224962</Inn>
                <Title>АВТОНОМНАЯ НЕКОММЕРЧЕСКАЯ ОРГАНИЗАЦИЯ ДОПОЛНИТЕЛЬНОГО ПРОФЕССИОНАЛЬНОГО ОБРАЗОВАНИЯ "УЧЕБНО-КОНСУЛЬТАЦИОННЫЙ ЦЕНТР "ПРОФТЕХЭКСПЕРТ"</Title>
            </Organization>
            <Test isPassed="true" learnProgramId="{learnProgramId}">
                <Date>{Date}</Date>
                <ProtocolNumber xml:space="preserve">{row['Номер протокола']}</ProtocolNumber>
                <LearnProgramTitle>{LearnProgramTitle}</LearnProgramTitle>
            </Test>
        </RegistryRecord>        """
    all_xml += a

all_xml += """
</RegistrySet>"""

# new_xml = ''
# for line in all_xml.split('\n'):
#     if 'nan' not in line:
#         new_xml += line + '\n'
print(all_xml)

#  # Step 4: Write the filtered lines back to the file
with open('result.xml', 'w', encoding='utf-8') as file:
    file.writelines(all_xml)
