
import time

"""
Наследование — способ создания класса. Функциональность нового класса наследуются от уже 
существующего класса. Новый класс - дочерний. Существующий — родительский.

Инкапсуляция
Ограничение доступа к методам и переменным.
Приватные атрибуты выделяются нижним подчеркиванием: одинарным _ или двойным __. 
 
Полиморфизм — особенность ООП, позволяющая использовать одну функцию для разных форм (типов данных).

"""


"""Паттерны - фабричный метод, декоратор, Абстрактная фабрика"""

"""Типы данных 
    НЕ ИЗМЕНЯЕМЫЙ"""
string_s1 = 'СТРОКА не изменяемый тип данных, поэтому каждый раз пересохраняется'
int_i1 = 123124 # ЦЕЛОЕ число без запятой , НЕ ИЗМЕНЯЕМЫЙ
float_f1 = 3.14  |  2e4 # ВЕЩЕСТВЕННОЕ число с плавающей точкой, НЕ ИЗМЕНЯЕМЫЙ
complex_c1 = 3 + 4j  # КОМПЛЕКСНОЕ число, НЕ ИЗМЕНЯЕМЫЙ
tupple_t1 = ('a', 1) #КОРТЕРЖ, неизменяемая УПОРЯДОЧЕННАЯ последовательность объектов, НЕ ИЗМЕНЯЕМЫЙ
bool_b1 = True #Булево значение Тру-фолсе , НЕ ИЗМЕНЯЕМЫЙ

"""Изменяемый"""
list_l1 = [1, 2]  # список, УПОРЯДОЧЕННАЯ последовательность объектов
set_s1 = {'a', 'b'} # множество, НЕупорядоченный набор уникальных объектов, но с индексами
dict_d1 = {'ключ': 'значение'}  # словарь, набор НЕупорядоченных пар ключ-значение, он же ХЭШ-таблица,  ключём может быть НЕ изменяемый тип данных



"""Структуры данных
Список,
кортеж
словарь
множество - set
___
 связный список (в классе self.item И self.next)
 хэштаблица
 коллекция
 стек
 граф (Нод -> ребро -> Нод)
"""

# Итератор это объект, который поддерживает функцию next()
iterator_i1 = iter([1, 'a',  None])
print(next(iterator_i1))
print(next(iterator_i1))
print(next(iterator_i1))

#Генератор списка
a = [i**2 for i in range(1, 5)]
# или
def create_generator():
    for i in os.wolk('c:\\'):
        yield i[0]
x = create_generator() # теперь генератор

#вырожение генератора списка
generator_g1 = (i**2 for i in range(1, 5)) # генератор - это итератор, элементы которого можно итерировать только 1 раз
print(a)


args = [iter(range(8))]*3 # ссылки 3, а итератор один, и при вызове указатель перемещается
print(list(zip(*args))) # [(0, 1, 2), (3, 4, 5)]




#структура http
"""
                HTTP Request
======================================================================================
Строка запроса - GET, POST     < GET  http://www.exp.ru  HTTP/1.1 >    ТИП | Адрес | Версия
Заголовок  - например  < HOST: http://www.exp.ru , User-Agent: Mazilla/5.0 >
body - тело, данные
======================================================================================


                HTTP responce 
======================================================================================
            < HTTP/1.1  200   OK                 >
                версия, код, текстовое описание
======================================================================================

GET - обычно получить информацию, может передавать параметры прямо в строке адреса, не должны делать изменения на сервере
POST - создание чего-то нового на сервере
PUT - изменение на сервере
DELETE - удаление
PATCH - не дополняет, а полностью перезаписывает содержимое без шаблона

                #Коды ответов от http
100-199 - информационный
200-299 - Успешный
300-399 - перенаправление
400-499 - Клиентские ошибки , возможно клиент не то отправил
500-599 - проблемы с сервером
"""

# Реалиционные БД
'''
Left       key1 | null

right    null | key1

inner - пересечения слева и справа 
outer - объединяется всё, если нет пересечений то ставится Null

SQL HAVING после Group by для операций Min max... 

EXPLAIN 
'''
"INSERT INTO user (col1, col2, col3) VALUES ('val1', 'val2','val3')"
"SELECT * from user  WHERE col1 == 'val1'"
"DELETE * from user  WHERE col1 == 'val1'"
"TRUNCATE * from user "


""" Транзакция - группа последовательных операций с БД, которая представляет собой логическую единицу работы с данными
BEGIN ... COMMIT;  / BEGIN ... ROLLBACK;"""

"""Многопроцессорность (multiprocessing) - это подход, при котором задачи выполняются в отдельных процессах."""
"""Асинхронность (asyncio ) - это подход, при котором задачи выполняются независимо друг от друга без блокировки основного потока выполнения."""
""" Многопоточность (threading) - это подход, при котором задачи выполняются в отдельных потоках внутри одного процесса"""

# Пример потоков++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
from threading import Thread

def func1():
    print('первая функция')
    time.sleep(5)
    print('первая всё')

def func2():
    print('вторая функция')
    time.sleep(5)
    print('вторая всё')

th1 = Thread(target=func1())
th1.start()
th2 = Thread(target=func2())
th2.start()

'''Loop -  цикл событий'''


# Магические методы
"""
Магические методы переопределяет поведение объектов для стандартных функций
__STR__ __repr__ __init__ __new__  __del__ __anatations__ __enter__() и __exit__() __len__
"""

# UnitTest
'''
import unittest
import my_foo
class TestCalc(unittest.TestCase):
    def testCalc(self):
        self.assertEquals(my_calc.addition(2,2) 4)
if __name__ == '__main__':
    unittest.main
'''
# Конетекстный менеджер - спец конструкция управления ресурсом (__enter__() и __exit__())

# *args - кортеж
# *kwargs - словарь

"""
если файл открыть open то какой тип данных будет? <class '_io.TextIOWrapper'>
уменьшить вводную часть
больше про стек и библиотеки
размеры - например приложение обрабатывало 1000 файлов в секунду
+ структура команды , 3 разраба, тимлид, ...
была jira . confluence
был ли ci/cd
потренить sql например сделать выборку из БД, по атрибуду и сложить что получилось
"""
"""Redis (Remote Dictionary Service) — это опенсорсный сервер баз данных типа ключ-значение.
Celery - это самый популярный инструмент для асинхронной обработки задач.  Celery предоставляет возможности для планирования, работы с разными очередями и мониторинга выполнения задач"""


#   Принципы SOLID
"""
                            Принципы SOLID
S – Single Responsibility (Принцип единственной ответственности) Каждый класс должен отвечать только за одну операцию
O — Open-Closed (Принцип открытости-закрытости) Классы должны  быть  открыты для расширения, но закрыты для модификации. 
L — Liskov Substitution (Принцип подстановки Барбары Лисков) - это принцип, который позволяет использовать объекты подтипов в любом месте, где ожидается объект базового типа.
I — Interface Segregation (Принцип разделения интерфейса) - это принцип, который позволяет разделить интерфейс на несколько более мелких интерфейсов, тем самым повышая его гибкость и повышая его тестируемость.
D – Dependency Inversion (Принцип инверсии зависимостей) - это принцип, который позволяет классу зависеть от абстракций, а не от их реализации."""


#
# new_list = []
#
#
# def flatten(seq):
#     for val in seq:
#         print(val)
#         if type(val) is list:
#             print('нашёл лист')
#             flatten(val)
#         else:
#             new_list.append(val)
#     return new_list
#
#     # raise NotImplemented
#
#
# a = [1, 2, 3, [4, [5, 6, 7]], [8], 9, [10, ], [], 11, [12, 13, 14], 15]
#
# result = flatten(a)
#
# print(f'->{result}')
#
# assert result == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
# использовать как генератор
# без рекурсии*
#

#       Жизненный цикл разрабатываемого кода:
"""Жизненный цикл разрабатываемого кода: 
 
1. **Планирование**: 
   - Определение требований проекта и целей разработки. 
   - Планирование архитектуры и структуры кода. 
   - Оценка рисков и управление проектом. 
 
2. **Проектирование**: 
   - Проектирование архитектуры приложения и структуры кода. 
   - Определение модулей, классов и функций. 
   - Выбор подходящих алгоритмов и структур данных. 
 
3. **Разработка**: 
   - Написание и тестирование кода в соответствии с проектными документами. 
   - Использование лучших практик программирования и стандартов кодирования. 
   - Рефакторинг и оптимизация кода. 
 
4. **Тестирование**: 
   - Проведение модульного, интеграционного и системного тестирования. 
   - Проверка соответствия функциональным и нефункциональным требованиям. 
   - Исправление ошибок и устранение дефектов. 
 
5. **Внедрение**: 
   - Развертывание и интеграция кода в рабочую среду. 
   - Подготовка документации и обучение пользователей. 
   - Мониторинг и поддержка в процессе эксплуатации. 
 
6. **Сопровождение**: 
   - Проведение регулярного обслуживания и обновлений кода. 
   - Реагирование на обратную связь пользователей и улучшение функциональности. 
   - Постоянное развитие и совершенствование приложения. """

"""Очереди / брокеры
RabbitMQ - похож на генератор - прочёл - сразу удалил. 
Kafka - хранит даже прочитанные сообщение определённое время
"""


def flatten(seq):
    for val in seq:
        if isinstance(val, list):
            yield from flatten(val)
        else:
            yield val

a = [1, 2, 3, [4, [5, 6, 7]], [8], 9, [10, ], [], 11, [12, 13, 14], 15]
result = list(flatten(a))
print(result)

"""Типичные примеры <<О-большого>>
O(log п), или логарифмическое время. Пример: бинарный поиск.
О(п), или линейное время. Пример: простой поиск.
О(п * log п). Пример: эффективные алгоритмы сортировки (быстрая сортировка).
О(п2). Пример: медленные алгоритмы сортировки (сортировка выбором).
О(п!). Пример: очень медленные алгоритмы (задача о коммивояжере)
"""

"""Nginx, Apache, IIS... - вебсервер
DWH Хранилищен данных - предметно ориентированнная ИБД, разработанная для подготовки отчётов и безнес-анализа

"""